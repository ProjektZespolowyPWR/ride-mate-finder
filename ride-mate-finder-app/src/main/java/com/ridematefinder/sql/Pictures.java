package com.ridematefinder.sql;


import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import org.apache.tomcat.util.codec.binary.Base64;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

/**
 * Pictures generated by hbm2java
 */
@Entity
@Table(name="pictures"
    ,schema="public"
)
public class Pictures  implements java.io.Serializable {


     private UUID id;
     @Lob
     private byte[] data;
     private Set<Badges> badgeses = new HashSet<Badges>(0);
     private Set<User> users = new HashSet<User>(0);
     private Set<Car> cars = new HashSet<Car>(0);

    public Pictures() {
    }

	
    public Pictures(UUID id, byte[] data) {
        this.id = id;
        this.data = data;
    }
    public Pictures(UUID id, byte[] data, Set<Badges> badgeses, Set<User> users, Set<Car> cars) {
       this.id = id;
       this.data = data;
       this.badgeses = badgeses;
       this.users = users;
       this.cars = cars;
    }
   
     @Id 

    
    @Column(name="id", unique=true, nullable=false)
    public UUID getId() {
        return this.id;
    }
    
    public void setId(UUID id) {
        this.id = id;
    }


    @Column(name="data", nullable=false, length=511)
    public byte[] getPictureData() {
        return this.data;
    }
    
    public void setPictureData(byte[] data) {
        this.data = data;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pictures")
    public Set<Badges> getBadgeses() {
        return this.badgeses;
    }
    
    public void setBadgeses(Set<Badges> badgeses) {
        this.badgeses = badgeses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pictures")
@JsonManagedReference
    public Set<User> getUsers() {
        return this.users;
    }
    
    public void setUsers(Set<User> users) {
        this.users = users;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pictures")
@JsonManagedReference
    public Set<Car> getCars() {
        return this.cars;
    }
    
    public void setCars(Set<Car> cars) {
        this.cars = cars;
    }

    public String generateBase64Image() {
        return Base64.encodeBase64String(this.data);
    }




}


